// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Admin:            newAdmin(db, opts...),
		AdminChatSetting: newAdminChatSetting(db, opts...),
		AutoMessage:      newAutoMessage(db, opts...),
		AutoRule:         newAutoRule(db, opts...),
		AutoRuleScene:    newAutoRuleScene(db, opts...),
		ChatSession:      newChatSession(db, opts...),
		ChatSetting:      newChatSetting(db, opts...),
		ChatTransfer:     newChatTransfer(db, opts...),
		Message:          newMessage(db, opts...),
		User:             newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin            admin
	AdminChatSetting adminChatSetting
	AutoMessage      autoMessage
	AutoRule         autoRule
	AutoRuleScene    autoRuleScene
	ChatSession      chatSession
	ChatSetting      chatSetting
	ChatTransfer     chatTransfer
	Message          message
	User             user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Admin:            q.Admin.clone(db),
		AdminChatSetting: q.AdminChatSetting.clone(db),
		AutoMessage:      q.AutoMessage.clone(db),
		AutoRule:         q.AutoRule.clone(db),
		AutoRuleScene:    q.AutoRuleScene.clone(db),
		ChatSession:      q.ChatSession.clone(db),
		ChatSetting:      q.ChatSetting.clone(db),
		ChatTransfer:     q.ChatTransfer.clone(db),
		Message:          q.Message.clone(db),
		User:             q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Admin:            q.Admin.replaceDB(db),
		AdminChatSetting: q.AdminChatSetting.replaceDB(db),
		AutoMessage:      q.AutoMessage.replaceDB(db),
		AutoRule:         q.AutoRule.replaceDB(db),
		AutoRuleScene:    q.AutoRuleScene.replaceDB(db),
		ChatSession:      q.ChatSession.replaceDB(db),
		ChatSetting:      q.ChatSetting.replaceDB(db),
		ChatTransfer:     q.ChatTransfer.replaceDB(db),
		Message:          q.Message.replaceDB(db),
		User:             q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Admin            *adminDo
	AdminChatSetting *adminChatSettingDo
	AutoMessage      *autoMessageDo
	AutoRule         *autoRuleDo
	AutoRuleScene    *autoRuleSceneDo
	ChatSession      *chatSessionDo
	ChatSetting      *chatSettingDo
	ChatTransfer     *chatTransferDo
	Message          *messageDo
	User             *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:            q.Admin.WithContext(ctx),
		AdminChatSetting: q.AdminChatSetting.WithContext(ctx),
		AutoMessage:      q.AutoMessage.WithContext(ctx),
		AutoRule:         q.AutoRule.WithContext(ctx),
		AutoRuleScene:    q.AutoRuleScene.WithContext(ctx),
		ChatSession:      q.ChatSession.WithContext(ctx),
		ChatSetting:      q.ChatSetting.WithContext(ctx),
		ChatTransfer:     q.ChatTransfer.WithContext(ctx),
		Message:          q.Message.WithContext(ctx),
		User:             q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
