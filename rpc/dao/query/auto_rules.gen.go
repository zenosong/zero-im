// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zero/rpc/dao/model"
)

func newAutoRule(db *gorm.DB, opts ...gen.DOOption) autoRule {
	_autoRule := autoRule{}

	_autoRule.autoRuleDo.UseDB(db, opts...)
	_autoRule.autoRuleDo.UseModel(&model.AutoRule{})

	tableName := _autoRule.autoRuleDo.TableName()
	_autoRule.ALL = field.NewAsterisk(tableName)
	_autoRule.ID = field.NewInt64(tableName, "id")
	_autoRule.Name = field.NewString(tableName, "name")
	_autoRule.Match = field.NewString(tableName, "match")
	_autoRule.MatchType = field.NewString(tableName, "match_type")
	_autoRule.ReplyType = field.NewString(tableName, "reply_type")
	_autoRule.MessageID = field.NewInt64(tableName, "message_id")
	_autoRule.Key = field.NewString(tableName, "key")
	_autoRule.IsSystem = field.NewInt32(tableName, "is_system")
	_autoRule.Sort = field.NewInt32(tableName, "sort")
	_autoRule.IsOpen = field.NewBool(tableName, "is_open")
	_autoRule.GroupID = field.NewInt64(tableName, "group_id")
	_autoRule.Count = field.NewInt64(tableName, "count")
	_autoRule.CreatedAt = field.NewTime(tableName, "created_at")
	_autoRule.UpdatedAt = field.NewTime(tableName, "updated_at")

	_autoRule.fillFieldMap()

	return _autoRule
}

type autoRule struct {
	autoRuleDo autoRuleDo

	ALL       field.Asterisk
	ID        field.Int64
	Name      field.String
	Match     field.String
	MatchType field.String
	ReplyType field.String
	MessageID field.Int64
	Key       field.String
	IsSystem  field.Int32
	Sort      field.Int32
	IsOpen    field.Bool
	GroupID   field.Int64
	Count     field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (a autoRule) Table(newTableName string) *autoRule {
	a.autoRuleDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a autoRule) As(alias string) *autoRule {
	a.autoRuleDo.DO = *(a.autoRuleDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *autoRule) updateTableName(table string) *autoRule {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Name = field.NewString(table, "name")
	a.Match = field.NewString(table, "match")
	a.MatchType = field.NewString(table, "match_type")
	a.ReplyType = field.NewString(table, "reply_type")
	a.MessageID = field.NewInt64(table, "message_id")
	a.Key = field.NewString(table, "key")
	a.IsSystem = field.NewInt32(table, "is_system")
	a.Sort = field.NewInt32(table, "sort")
	a.IsOpen = field.NewBool(table, "is_open")
	a.GroupID = field.NewInt64(table, "group_id")
	a.Count = field.NewInt64(table, "count")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *autoRule) WithContext(ctx context.Context) *autoRuleDo { return a.autoRuleDo.WithContext(ctx) }

func (a autoRule) TableName() string { return a.autoRuleDo.TableName() }

func (a autoRule) Alias() string { return a.autoRuleDo.Alias() }

func (a autoRule) Columns(cols ...field.Expr) gen.Columns { return a.autoRuleDo.Columns(cols...) }

func (a *autoRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *autoRule) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 14)
	a.fieldMap["id"] = a.ID
	a.fieldMap["name"] = a.Name
	a.fieldMap["match"] = a.Match
	a.fieldMap["match_type"] = a.MatchType
	a.fieldMap["reply_type"] = a.ReplyType
	a.fieldMap["message_id"] = a.MessageID
	a.fieldMap["key"] = a.Key
	a.fieldMap["is_system"] = a.IsSystem
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["is_open"] = a.IsOpen
	a.fieldMap["group_id"] = a.GroupID
	a.fieldMap["count"] = a.Count
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a autoRule) clone(db *gorm.DB) autoRule {
	a.autoRuleDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a autoRule) replaceDB(db *gorm.DB) autoRule {
	a.autoRuleDo.ReplaceDB(db)
	return a
}

type autoRuleDo struct{ gen.DO }

func (a autoRuleDo) Debug() *autoRuleDo {
	return a.withDO(a.DO.Debug())
}

func (a autoRuleDo) WithContext(ctx context.Context) *autoRuleDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a autoRuleDo) ReadDB() *autoRuleDo {
	return a.Clauses(dbresolver.Read)
}

func (a autoRuleDo) WriteDB() *autoRuleDo {
	return a.Clauses(dbresolver.Write)
}

func (a autoRuleDo) Session(config *gorm.Session) *autoRuleDo {
	return a.withDO(a.DO.Session(config))
}

func (a autoRuleDo) Clauses(conds ...clause.Expression) *autoRuleDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a autoRuleDo) Returning(value interface{}, columns ...string) *autoRuleDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a autoRuleDo) Not(conds ...gen.Condition) *autoRuleDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a autoRuleDo) Or(conds ...gen.Condition) *autoRuleDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a autoRuleDo) Select(conds ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a autoRuleDo) Where(conds ...gen.Condition) *autoRuleDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a autoRuleDo) Order(conds ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a autoRuleDo) Distinct(cols ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a autoRuleDo) Omit(cols ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a autoRuleDo) Join(table schema.Tabler, on ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a autoRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a autoRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a autoRuleDo) Group(cols ...field.Expr) *autoRuleDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a autoRuleDo) Having(conds ...gen.Condition) *autoRuleDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a autoRuleDo) Limit(limit int) *autoRuleDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a autoRuleDo) Offset(offset int) *autoRuleDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a autoRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *autoRuleDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a autoRuleDo) Unscoped() *autoRuleDo {
	return a.withDO(a.DO.Unscoped())
}

func (a autoRuleDo) Create(values ...*model.AutoRule) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a autoRuleDo) CreateInBatches(values []*model.AutoRule, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a autoRuleDo) Save(values ...*model.AutoRule) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a autoRuleDo) First() (*model.AutoRule, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoRule), nil
	}
}

func (a autoRuleDo) Take() (*model.AutoRule, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoRule), nil
	}
}

func (a autoRuleDo) Last() (*model.AutoRule, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoRule), nil
	}
}

func (a autoRuleDo) Find() ([]*model.AutoRule, error) {
	result, err := a.DO.Find()
	return result.([]*model.AutoRule), err
}

func (a autoRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AutoRule, err error) {
	buf := make([]*model.AutoRule, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a autoRuleDo) FindInBatches(result *[]*model.AutoRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a autoRuleDo) Attrs(attrs ...field.AssignExpr) *autoRuleDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a autoRuleDo) Assign(attrs ...field.AssignExpr) *autoRuleDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a autoRuleDo) Joins(fields ...field.RelationField) *autoRuleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a autoRuleDo) Preload(fields ...field.RelationField) *autoRuleDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a autoRuleDo) FirstOrInit() (*model.AutoRule, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoRule), nil
	}
}

func (a autoRuleDo) FirstOrCreate() (*model.AutoRule, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AutoRule), nil
	}
}

func (a autoRuleDo) FindByPage(offset int, limit int) (result []*model.AutoRule, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a autoRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a autoRuleDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a autoRuleDo) Delete(models ...*model.AutoRule) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *autoRuleDo) withDO(do gen.Dao) *autoRuleDo {
	a.DO = *do.(*gen.DO)
	return a
}
