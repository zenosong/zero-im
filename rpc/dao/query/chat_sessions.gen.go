// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zero/rpc/dao/model"
)

func newChatSession(db *gorm.DB, opts ...gen.DOOption) chatSession {
	_chatSession := chatSession{}

	_chatSession.chatSessionDo.UseDB(db, opts...)
	_chatSession.chatSessionDo.UseModel(&model.ChatSession{})

	tableName := _chatSession.chatSessionDo.TableName()
	_chatSession.ALL = field.NewAsterisk(tableName)
	_chatSession.ID = field.NewInt64(tableName, "id")
	_chatSession.UserID = field.NewInt64(tableName, "user_id")
	_chatSession.QueriedAt = field.NewInt64(tableName, "queried_at")
	_chatSession.AcceptedAt = field.NewInt64(tableName, "accepted_at")
	_chatSession.CanceledAt = field.NewInt64(tableName, "canceled_at")
	_chatSession.BrokeAt = field.NewInt64(tableName, "broke_at")
	_chatSession.GroupID = field.NewInt64(tableName, "group_id")
	_chatSession.AdminID = field.NewInt64(tableName, "admin_id")
	_chatSession.Type = field.NewInt32(tableName, "type")

	_chatSession.fillFieldMap()

	return _chatSession
}

type chatSession struct {
	chatSessionDo chatSessionDo

	ALL        field.Asterisk
	ID         field.Int64
	UserID     field.Int64
	QueriedAt  field.Int64
	AcceptedAt field.Int64
	CanceledAt field.Int64
	BrokeAt    field.Int64
	GroupID    field.Int64
	AdminID    field.Int64
	Type       field.Int32

	fieldMap map[string]field.Expr
}

func (c chatSession) Table(newTableName string) *chatSession {
	c.chatSessionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatSession) As(alias string) *chatSession {
	c.chatSessionDo.DO = *(c.chatSessionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatSession) updateTableName(table string) *chatSession {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewInt64(table, "user_id")
	c.QueriedAt = field.NewInt64(table, "queried_at")
	c.AcceptedAt = field.NewInt64(table, "accepted_at")
	c.CanceledAt = field.NewInt64(table, "canceled_at")
	c.BrokeAt = field.NewInt64(table, "broke_at")
	c.GroupID = field.NewInt64(table, "group_id")
	c.AdminID = field.NewInt64(table, "admin_id")
	c.Type = field.NewInt32(table, "type")

	c.fillFieldMap()

	return c
}

func (c *chatSession) WithContext(ctx context.Context) *chatSessionDo {
	return c.chatSessionDo.WithContext(ctx)
}

func (c chatSession) TableName() string { return c.chatSessionDo.TableName() }

func (c chatSession) Alias() string { return c.chatSessionDo.Alias() }

func (c chatSession) Columns(cols ...field.Expr) gen.Columns { return c.chatSessionDo.Columns(cols...) }

func (c *chatSession) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatSession) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["queried_at"] = c.QueriedAt
	c.fieldMap["accepted_at"] = c.AcceptedAt
	c.fieldMap["canceled_at"] = c.CanceledAt
	c.fieldMap["broke_at"] = c.BrokeAt
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["admin_id"] = c.AdminID
	c.fieldMap["type"] = c.Type
}

func (c chatSession) clone(db *gorm.DB) chatSession {
	c.chatSessionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatSession) replaceDB(db *gorm.DB) chatSession {
	c.chatSessionDo.ReplaceDB(db)
	return c
}

type chatSessionDo struct{ gen.DO }

func (c chatSessionDo) Debug() *chatSessionDo {
	return c.withDO(c.DO.Debug())
}

func (c chatSessionDo) WithContext(ctx context.Context) *chatSessionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatSessionDo) ReadDB() *chatSessionDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatSessionDo) WriteDB() *chatSessionDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatSessionDo) Session(config *gorm.Session) *chatSessionDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatSessionDo) Clauses(conds ...clause.Expression) *chatSessionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatSessionDo) Returning(value interface{}, columns ...string) *chatSessionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatSessionDo) Not(conds ...gen.Condition) *chatSessionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatSessionDo) Or(conds ...gen.Condition) *chatSessionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatSessionDo) Select(conds ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatSessionDo) Where(conds ...gen.Condition) *chatSessionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatSessionDo) Order(conds ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatSessionDo) Distinct(cols ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatSessionDo) Omit(cols ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatSessionDo) Join(table schema.Tabler, on ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatSessionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatSessionDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatSessionDo) Group(cols ...field.Expr) *chatSessionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatSessionDo) Having(conds ...gen.Condition) *chatSessionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatSessionDo) Limit(limit int) *chatSessionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatSessionDo) Offset(offset int) *chatSessionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatSessionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatSessionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatSessionDo) Unscoped() *chatSessionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatSessionDo) Create(values ...*model.ChatSession) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatSessionDo) CreateInBatches(values []*model.ChatSession, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatSessionDo) Save(values ...*model.ChatSession) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatSessionDo) First() (*model.ChatSession, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatSession), nil
	}
}

func (c chatSessionDo) Take() (*model.ChatSession, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatSession), nil
	}
}

func (c chatSessionDo) Last() (*model.ChatSession, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatSession), nil
	}
}

func (c chatSessionDo) Find() ([]*model.ChatSession, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatSession), err
}

func (c chatSessionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatSession, err error) {
	buf := make([]*model.ChatSession, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatSessionDo) FindInBatches(result *[]*model.ChatSession, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatSessionDo) Attrs(attrs ...field.AssignExpr) *chatSessionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatSessionDo) Assign(attrs ...field.AssignExpr) *chatSessionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatSessionDo) Joins(fields ...field.RelationField) *chatSessionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatSessionDo) Preload(fields ...field.RelationField) *chatSessionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatSessionDo) FirstOrInit() (*model.ChatSession, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatSession), nil
	}
}

func (c chatSessionDo) FirstOrCreate() (*model.ChatSession, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatSession), nil
	}
}

func (c chatSessionDo) FindByPage(offset int, limit int) (result []*model.ChatSession, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatSessionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatSessionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatSessionDo) Delete(models ...*model.ChatSession) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatSessionDo) withDO(do gen.Dao) *chatSessionDo {
	c.DO = *do.(*gen.DO)
	return c
}
