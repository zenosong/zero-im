// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zero/rpc/dao/model"
)

func newAdminChatSetting(db *gorm.DB, opts ...gen.DOOption) adminChatSetting {
	_adminChatSetting := adminChatSetting{}

	_adminChatSetting.adminChatSettingDo.UseDB(db, opts...)
	_adminChatSetting.adminChatSettingDo.UseModel(&model.AdminChatSetting{})

	tableName := _adminChatSetting.adminChatSettingDo.TableName()
	_adminChatSetting.ALL = field.NewAsterisk(tableName)
	_adminChatSetting.ID = field.NewInt64(tableName, "id")
	_adminChatSetting.AdminID = field.NewInt64(tableName, "admin_id")
	_adminChatSetting.Background = field.NewString(tableName, "background")
	_adminChatSetting.IsAutoAccept = field.NewBool(tableName, "is_auto_accept")
	_adminChatSetting.WelcomeContent = field.NewString(tableName, "welcome_content")
	_adminChatSetting.OfflineContent = field.NewString(tableName, "offline_content")
	_adminChatSetting.Name = field.NewString(tableName, "name")
	_adminChatSetting.LastOnline = field.NewTime(tableName, "last_online")
	_adminChatSetting.Avatar = field.NewString(tableName, "avatar")
	_adminChatSetting.CreatedAt = field.NewTime(tableName, "created_at")
	_adminChatSetting.UpdatedAt = field.NewTime(tableName, "updated_at")

	_adminChatSetting.fillFieldMap()

	return _adminChatSetting
}

type adminChatSetting struct {
	adminChatSettingDo adminChatSettingDo

	ALL            field.Asterisk
	ID             field.Int64
	AdminID        field.Int64
	Background     field.String
	IsAutoAccept   field.Bool
	WelcomeContent field.String
	OfflineContent field.String
	Name           field.String
	LastOnline     field.Time
	Avatar         field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (a adminChatSetting) Table(newTableName string) *adminChatSetting {
	a.adminChatSettingDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminChatSetting) As(alias string) *adminChatSetting {
	a.adminChatSettingDo.DO = *(a.adminChatSettingDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminChatSetting) updateTableName(table string) *adminChatSetting {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.Background = field.NewString(table, "background")
	a.IsAutoAccept = field.NewBool(table, "is_auto_accept")
	a.WelcomeContent = field.NewString(table, "welcome_content")
	a.OfflineContent = field.NewString(table, "offline_content")
	a.Name = field.NewString(table, "name")
	a.LastOnline = field.NewTime(table, "last_online")
	a.Avatar = field.NewString(table, "avatar")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *adminChatSetting) WithContext(ctx context.Context) *adminChatSettingDo {
	return a.adminChatSettingDo.WithContext(ctx)
}

func (a adminChatSetting) TableName() string { return a.adminChatSettingDo.TableName() }

func (a adminChatSetting) Alias() string { return a.adminChatSettingDo.Alias() }

func (a adminChatSetting) Columns(cols ...field.Expr) gen.Columns {
	return a.adminChatSettingDo.Columns(cols...)
}

func (a *adminChatSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminChatSetting) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["background"] = a.Background
	a.fieldMap["is_auto_accept"] = a.IsAutoAccept
	a.fieldMap["welcome_content"] = a.WelcomeContent
	a.fieldMap["offline_content"] = a.OfflineContent
	a.fieldMap["name"] = a.Name
	a.fieldMap["last_online"] = a.LastOnline
	a.fieldMap["avatar"] = a.Avatar
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a adminChatSetting) clone(db *gorm.DB) adminChatSetting {
	a.adminChatSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminChatSetting) replaceDB(db *gorm.DB) adminChatSetting {
	a.adminChatSettingDo.ReplaceDB(db)
	return a
}

type adminChatSettingDo struct{ gen.DO }

func (a adminChatSettingDo) Debug() *adminChatSettingDo {
	return a.withDO(a.DO.Debug())
}

func (a adminChatSettingDo) WithContext(ctx context.Context) *adminChatSettingDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminChatSettingDo) ReadDB() *adminChatSettingDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminChatSettingDo) WriteDB() *adminChatSettingDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminChatSettingDo) Session(config *gorm.Session) *adminChatSettingDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminChatSettingDo) Clauses(conds ...clause.Expression) *adminChatSettingDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminChatSettingDo) Returning(value interface{}, columns ...string) *adminChatSettingDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminChatSettingDo) Not(conds ...gen.Condition) *adminChatSettingDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminChatSettingDo) Or(conds ...gen.Condition) *adminChatSettingDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminChatSettingDo) Select(conds ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminChatSettingDo) Where(conds ...gen.Condition) *adminChatSettingDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminChatSettingDo) Order(conds ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminChatSettingDo) Distinct(cols ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminChatSettingDo) Omit(cols ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminChatSettingDo) Join(table schema.Tabler, on ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminChatSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminChatSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminChatSettingDo) Group(cols ...field.Expr) *adminChatSettingDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminChatSettingDo) Having(conds ...gen.Condition) *adminChatSettingDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminChatSettingDo) Limit(limit int) *adminChatSettingDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminChatSettingDo) Offset(offset int) *adminChatSettingDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminChatSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *adminChatSettingDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminChatSettingDo) Unscoped() *adminChatSettingDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminChatSettingDo) Create(values ...*model.AdminChatSetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminChatSettingDo) CreateInBatches(values []*model.AdminChatSetting, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminChatSettingDo) Save(values ...*model.AdminChatSetting) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminChatSettingDo) First() (*model.AdminChatSetting, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminChatSetting), nil
	}
}

func (a adminChatSettingDo) Take() (*model.AdminChatSetting, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminChatSetting), nil
	}
}

func (a adminChatSettingDo) Last() (*model.AdminChatSetting, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminChatSetting), nil
	}
}

func (a adminChatSettingDo) Find() ([]*model.AdminChatSetting, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminChatSetting), err
}

func (a adminChatSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminChatSetting, err error) {
	buf := make([]*model.AdminChatSetting, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminChatSettingDo) FindInBatches(result *[]*model.AdminChatSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminChatSettingDo) Attrs(attrs ...field.AssignExpr) *adminChatSettingDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminChatSettingDo) Assign(attrs ...field.AssignExpr) *adminChatSettingDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminChatSettingDo) Joins(fields ...field.RelationField) *adminChatSettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminChatSettingDo) Preload(fields ...field.RelationField) *adminChatSettingDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminChatSettingDo) FirstOrInit() (*model.AdminChatSetting, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminChatSetting), nil
	}
}

func (a adminChatSettingDo) FirstOrCreate() (*model.AdminChatSetting, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminChatSetting), nil
	}
}

func (a adminChatSettingDo) FindByPage(offset int, limit int) (result []*model.AdminChatSetting, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminChatSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminChatSettingDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminChatSettingDo) Delete(models ...*model.AdminChatSetting) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminChatSettingDo) withDO(do gen.Dao) *adminChatSettingDo {
	a.DO = *do.(*gen.DO)
	return a
}
