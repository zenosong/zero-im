// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"zero/rpc/dao/model"
)

func newChatTransfer(db *gorm.DB, opts ...gen.DOOption) chatTransfer {
	_chatTransfer := chatTransfer{}

	_chatTransfer.chatTransferDo.UseDB(db, opts...)
	_chatTransfer.chatTransferDo.UseModel(&model.ChatTransfer{})

	tableName := _chatTransfer.chatTransferDo.TableName()
	_chatTransfer.ALL = field.NewAsterisk(tableName)
	_chatTransfer.ID = field.NewInt64(tableName, "id")
	_chatTransfer.UserID = field.NewInt64(tableName, "user_id")
	_chatTransfer.SessionID = field.NewInt64(tableName, "session_id")
	_chatTransfer.FromAdminID = field.NewInt64(tableName, "from_admin_id")
	_chatTransfer.ToAdminID = field.NewInt64(tableName, "to_admin_id")
	_chatTransfer.GroupID = field.NewInt64(tableName, "group_id")
	_chatTransfer.Remark = field.NewString(tableName, "remark")
	_chatTransfer.IsAccepted = field.NewBool(tableName, "is_accepted")
	_chatTransfer.IsCanceled = field.NewBool(tableName, "is_canceled")
	_chatTransfer.CreatedAt = field.NewInt64(tableName, "created_at")
	_chatTransfer.AcceptedAt = field.NewInt64(tableName, "accepted_at")
	_chatTransfer.CanceledAt = field.NewInt64(tableName, "canceled_at")

	_chatTransfer.fillFieldMap()

	return _chatTransfer
}

type chatTransfer struct {
	chatTransferDo chatTransferDo

	ALL         field.Asterisk
	ID          field.Int64
	UserID      field.Int64
	SessionID   field.Int64
	FromAdminID field.Int64
	ToAdminID   field.Int64
	GroupID     field.Int64
	Remark      field.String
	IsAccepted  field.Bool
	IsCanceled  field.Bool
	CreatedAt   field.Int64
	AcceptedAt  field.Int64
	CanceledAt  field.Int64

	fieldMap map[string]field.Expr
}

func (c chatTransfer) Table(newTableName string) *chatTransfer {
	c.chatTransferDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatTransfer) As(alias string) *chatTransfer {
	c.chatTransferDo.DO = *(c.chatTransferDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatTransfer) updateTableName(table string) *chatTransfer {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.UserID = field.NewInt64(table, "user_id")
	c.SessionID = field.NewInt64(table, "session_id")
	c.FromAdminID = field.NewInt64(table, "from_admin_id")
	c.ToAdminID = field.NewInt64(table, "to_admin_id")
	c.GroupID = field.NewInt64(table, "group_id")
	c.Remark = field.NewString(table, "remark")
	c.IsAccepted = field.NewBool(table, "is_accepted")
	c.IsCanceled = field.NewBool(table, "is_canceled")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.AcceptedAt = field.NewInt64(table, "accepted_at")
	c.CanceledAt = field.NewInt64(table, "canceled_at")

	c.fillFieldMap()

	return c
}

func (c *chatTransfer) WithContext(ctx context.Context) *chatTransferDo {
	return c.chatTransferDo.WithContext(ctx)
}

func (c chatTransfer) TableName() string { return c.chatTransferDo.TableName() }

func (c chatTransfer) Alias() string { return c.chatTransferDo.Alias() }

func (c chatTransfer) Columns(cols ...field.Expr) gen.Columns {
	return c.chatTransferDo.Columns(cols...)
}

func (c *chatTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatTransfer) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["user_id"] = c.UserID
	c.fieldMap["session_id"] = c.SessionID
	c.fieldMap["from_admin_id"] = c.FromAdminID
	c.fieldMap["to_admin_id"] = c.ToAdminID
	c.fieldMap["group_id"] = c.GroupID
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["is_accepted"] = c.IsAccepted
	c.fieldMap["is_canceled"] = c.IsCanceled
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["accepted_at"] = c.AcceptedAt
	c.fieldMap["canceled_at"] = c.CanceledAt
}

func (c chatTransfer) clone(db *gorm.DB) chatTransfer {
	c.chatTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatTransfer) replaceDB(db *gorm.DB) chatTransfer {
	c.chatTransferDo.ReplaceDB(db)
	return c
}

type chatTransferDo struct{ gen.DO }

func (c chatTransferDo) Debug() *chatTransferDo {
	return c.withDO(c.DO.Debug())
}

func (c chatTransferDo) WithContext(ctx context.Context) *chatTransferDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatTransferDo) ReadDB() *chatTransferDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatTransferDo) WriteDB() *chatTransferDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatTransferDo) Session(config *gorm.Session) *chatTransferDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatTransferDo) Clauses(conds ...clause.Expression) *chatTransferDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatTransferDo) Returning(value interface{}, columns ...string) *chatTransferDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatTransferDo) Not(conds ...gen.Condition) *chatTransferDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatTransferDo) Or(conds ...gen.Condition) *chatTransferDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatTransferDo) Select(conds ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatTransferDo) Where(conds ...gen.Condition) *chatTransferDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatTransferDo) Order(conds ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatTransferDo) Distinct(cols ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatTransferDo) Omit(cols ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatTransferDo) Join(table schema.Tabler, on ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatTransferDo) Group(cols ...field.Expr) *chatTransferDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatTransferDo) Having(conds ...gen.Condition) *chatTransferDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatTransferDo) Limit(limit int) *chatTransferDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatTransferDo) Offset(offset int) *chatTransferDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatTransferDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatTransferDo) Unscoped() *chatTransferDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatTransferDo) Create(values ...*model.ChatTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatTransferDo) CreateInBatches(values []*model.ChatTransfer, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatTransferDo) Save(values ...*model.ChatTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatTransferDo) First() (*model.ChatTransfer, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatTransfer), nil
	}
}

func (c chatTransferDo) Take() (*model.ChatTransfer, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatTransfer), nil
	}
}

func (c chatTransferDo) Last() (*model.ChatTransfer, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatTransfer), nil
	}
}

func (c chatTransferDo) Find() ([]*model.ChatTransfer, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChatTransfer), err
}

func (c chatTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChatTransfer, err error) {
	buf := make([]*model.ChatTransfer, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatTransferDo) FindInBatches(result *[]*model.ChatTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatTransferDo) Attrs(attrs ...field.AssignExpr) *chatTransferDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatTransferDo) Assign(attrs ...field.AssignExpr) *chatTransferDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatTransferDo) Joins(fields ...field.RelationField) *chatTransferDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatTransferDo) Preload(fields ...field.RelationField) *chatTransferDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatTransferDo) FirstOrInit() (*model.ChatTransfer, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatTransfer), nil
	}
}

func (c chatTransferDo) FirstOrCreate() (*model.ChatTransfer, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChatTransfer), nil
	}
}

func (c chatTransferDo) FindByPage(offset int, limit int) (result []*model.ChatTransfer, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatTransferDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatTransferDo) Delete(models ...*model.ChatTransfer) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatTransferDo) withDO(do gen.Dao) *chatTransferDo {
	c.DO = *do.(*gen.DO)
	return c
}
